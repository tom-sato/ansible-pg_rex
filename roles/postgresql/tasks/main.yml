---
- name: Installing RPM GPG Key
  rpm_key:
    key: https://download.postgresql.org/pub/repos/yum/keys/PGDG-RPM-GPG-KEY-RHEL
- name: Installing Yum Repository
  yum:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/pgdg-redhat-repo-latest.noarch.rpm
- name: Installing PostgreSQL
  yum:
    name:
      - postgresql{{ postgresql_version }}-libs
      - postgresql{{ postgresql_version }}
      - postgresql{{ postgresql_version }}-server
      - postgresql{{ postgresql_version }}-contrib
      - postgresql{{ postgresql_version }}-docs
- name: Checking if Password for postgres User is Set
  command:
    cmd: passwd -S postgres
  register: _passwd
  changed_when: false
- name: Setting Password for postgres User
  user:
    name: postgres
    password: "{{ postgresql_password | password_hash('sha512') }}"
  when: _passwd.stdout is not search('PS')
- name: Setting Environment Variables in Bash Profile File
  blockinfile:
    path: /var/lib/pgsql/.bash_profile
    block: |
      export PATH=/usr/pgsql-{{ postgresql_version }}/bin:$PATH
      export PGDATA={{ postgresql_data_directory }}
    owner: postgres
    group: postgres
- name: Creating Data and Other Directories
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  loop:
    - "{{ postgresql_data_directory }}"
    - "{{ postgresql_wal_directory }}"
    - "{{ postgresql_archive_directory }}"
- block:
    - name: Checking if Database Cluster Exists
      stat:
        path: "{{ postgresql_data_directory }}/PG_VERSION"
      register: _pg_version
    - block:
        - name: Creating Temporary Password File
          tempfile:
          register: _tempfile
        - block:
            - name: Setting Password in Temporary File
              lineinfile:
                path: "{{ _tempfile.path }}"
                line: "{{ postgresql_password }}"
                owner: postgres
                group: postgres
                mode: 0600
                create: true
            - name: Creating Database Cluster
              command:
                cmd: /usr/pgsql-{{ postgresql_version }}/bin/initdb -D {{ postgresql_data_directory }} -X {{ postgresql_wal_directory }} --encoding=UTF8 --no-locale --data-checksums --pwfile={{ _tempfile.path }}
              become_user: postgres
          always:
            - name: Removing Temporary Password File
              file:
                path: "{{ _tempfile.path }}"
                state: absent
      when: not _pg_version.stat.exists
    - name: Editing Config File
      lineinfile:
        path: "{{ postgresql_data_directory }}/postgresql.conf"
        regexp: ^#?({{ item.0 }}) = (?:'(?:[^']|'')*'|[^ ]+)(\s+#.*)?$
        line: \1 = {{ item.1 }}\2
        backrefs: true
      loop:
        - - listen_addresses
          - "'*'"
        - - port
          - "{{ postgresql_port }}"
        - - superuser_reserved_connections
          - 10
        - - password_encryption
          - scram-sha-256
        - - wal_level
          - replica
        - - synchronous_commit
          - "on"
        - - archive_mode
          - "on"
        - - archive_command
          - "'/bin/cp %p {{ postgresql_archive_directory }}/%f'"
        - - max_wal_senders
          - 10
        - - wal_keep_size
          - 512MB
        - - wal_sender_timeout
          - 20s
        - - max_replication_slots
          - 10
        - - hot_standby
          - "on"
        - - max_standby_archive_delay
          - -1
        - - max_standby_streaming_delay
          - -1
        - - hot_standby_feedback
          - "on"
        - - wal_receiver_timeout
          - 20s
        - - restart_after_crash
          - "off"
    - name: Checking if Repuser Exists Signal File Exists
      stat:
        path: "{{ postgresql_data_directory }}/.repuser_exists.signal"
      register: _repuser_exists_signal
    - block:
        - name: Starting PostgreSQL Server
          command:
            cmd: /usr/pgsql-{{ postgresql_version }}/bin/pg_ctl start -D {{ postgresql_data_directory }}
            creates: "{{ postgresql_data_directory }}/postmaster.pid"
        - name: Checking if Replication User Exists
          command:
            cmd: /usr/pgsql-{{ postgresql_version }}/bin/psql -c "SELECT 'repuser_exists' WHERE EXISTS (SELECT * FROM pg_roles WHERE rolname = '{{ postgresql_replication_user }}')" -p {{ postgresql_port }}
          register: _psql
          changed_when: false
        - name: Creating Replication User
          command:
            cmd: /usr/pgsql-{{ postgresql_version }}/bin/psql -c "CREATE ROLE {{ postgresql_replication_user }} REPLICATION LOGIN PASSWORD '{{ postgresql_replication_password }}'" -p {{ postgresql_port }}
          when: _psql.stdout is not search('repuser_exists')
        - name: Stopping PostgreSQL Server
          command:
            cmd: /usr/pgsql-{{ postgresql_version }}/bin/pg_ctl stop -D {{ postgresql_data_directory }}
            removes: "{{ postgresql_data_directory }}/postmaster.pid"
        - name: Creating Repuser Exists Signal File
          file:
            path: "{{ postgresql_data_directory }}/.repuser_exists.signal"
            state: touch
      become_user: postgres
      when: not _repuser_exists_signal.stat.exists
    - name: Editing HBA File
      blockinfile:
        path: "{{ postgresql_data_directory }}/pg_hba.conf"
        block: |
          host    all             all             {{ '%s/%s' | format(ansible_facts[s_lan_interface].ipv4.network, ansible_facts[s_lan_interface].ipv4.netmask) | ipaddr('network/prefix') }}         scram-sha-256
          {% for item in groups.all %}
          host    replication     {{ postgresql_replication_user }}         {{ hostvars[item]['ansible_' + d_lan_interface].ipv4.address }}/32       scram-sha-256
          {% endfor %}
  when: ansible_hostname == groups.all.0
- name: Creating Password File
  blockinfile:
    path: /var/lib/pgsql/.pgpass
    block: |
      {{ postgresql_replication_address }}:{{ postgresql_port }}:replication:{{ postgresql_replication_user }}:{{ postgresql_replication_password }}
      {% for item in groups.all | difference([ansible_hostname]) %}
      {{ hostvars[item]['ansible_' + d_lan_interface].ipv4.address }}:{{ postgresql_port }}:replication:{{ postgresql_replication_user }}:{{ postgresql_replication_password }}
      {% endfor %}
    owner: postgres
    group: postgres
    mode: 0600
    create: true
