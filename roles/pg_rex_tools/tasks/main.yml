---
- name: Checking if Package is Installed
  package_facts:
- block:
    - name: Checking if Archive is Unpacked
      find:
        paths: ./pg-rex
      register: _find
    - block:
        - name: Creating Destination Directory
          file:
            path: ./pg-rex
            state: directory
        - name: Unpacking Archive
          unarchive:
            src: "{{ pg_rex_tools_download_urls[ansible_distribution_major_version] }}"
            dest: "{{ ansible_env.PWD }}/pg-rex"
            remote_src: true
      when: _find.matched == 0
    - name: Finding Packages
      find:
        paths: ./pg-rex
        patterns: "{{ '*.el%s.*.rpm' | format(ansible_distribution_major_version) }}"
        recurse: true
      register: _find
    - name: Installing PG-REX Operation Tools
      yum:
        name: "{{ items | flatten(1) | select() }}"
        disable_gpg_check: true
      vars:
        items:
          - "{{ _find.files | json_query('[*].path') }}"
          - lsof
          - "{{ ansible_distribution_major_version is version('9', '>=') | ternary('perl-File-Compare', '') }}"
  when: "'pg-rex_operation_tools_script' not in ansible_facts.packages"
- name: Removing Destination Directory
  file:
    path: ./pg-rex
    state: absent
- name: Fixing to Skip PostgreSQL Version Check
  lineinfile:
    path: /usr/local/share/perl5/{{ ansible_distribution_major_version is version('9', '>=') | ternary('5.32/', '') }}PGRex/common.pm
    regexp: ^(\s+)(if \(int\(\$version_num / 10000\) != \d+)(\){)$
    line: \1#\2\3\n\1\2 && 0\3
    backrefs: true
- name: Fixing to Remove --no-manifest from pg_basebackup
  replace:
    path: /usr/local/bin/pg-rex_standby_start
    regexp: ^(\s+)(.+)(--no-manifest )(.+)$
    replace: \1#\2\3\4\n\1\2\4
  when: postgresql_version is version('12', '<=')
- name: Editing Config File
  lineinfile:
    path: /etc/pg-rex_tools.conf
    regex: ^({{ item.0 }}) = (?:[^ ,]+(?:\s*,\s*[^ ,]+)*)?(\s+#.*)$
    line: \1 = {{ item.1 }}\2
    backrefs: true
  loop:
    - - D_LAN_IPAddress
      - "{{ hostvars | json_query('*.ansible_%s.ipv4.address' | format(d_lan_interface)) | join(',') }}"
    - - IC_LAN_IPAddress
      - >-
        {%- for item in ic_lan_interfaces -%}
        {{ '(%s)' | format(hostvars | json_query('*.ansible_%s.ipv4.address' | format(item)) | join(',')) }}
        {%- if item != ic_lan_interfaces[-1] -%},{%- endif -%}
        {%- endfor -%}
    - - Archive_dir
      - "{{ postgresql_archive_directory }}"
    - - PGPATH
      - /usr/pgsql-{{ postgresql_version }}/bin
    - - PEER_NODE_SSH_PASS_MODE
      - nopass
    - - BACKUP_NODE_SSH_PASS_MODE
      - nopass
    - - HACLUSTER_NAME
      - "{{ pacemaker_cluster_name }}"
- name: Gathering SSH Host Key
  command:
    cmd: ssh-keyscan {{ hostvars[item]['ansible_' + d_lan_interface].ipv4.address }}
  loop: "{{ groups.all | difference([ansible_hostname]) }}"
  register: _ssh_keygen
  changed_when: false
- name: Creating SSH Directory
  file:
    path: /root/.ssh
    state: directory
- name: Adding SSH Host Key to Known Hosts File
  known_hosts:
    path: /root/.ssh/known_hosts
    name: "{{ item.cmd.1 }}"
    key: "{{ item.stdout }}"
  loop: "{{ _ssh_keygen.results }}"
- name: Creating SSH Key Pair
  openssh_keypair:
    path: /root/.ssh/id_rsa
  register: _openssh_keypair
- name: Adding SSH Key to Authorized Keys File
  authorized_key:
    user: root
    key: "{{ _openssh_keypair.public_key }}"
  delegate_to: "{{ item }}"
  loop: "{{ groups.all | difference([ansible_hostname]) }}"
