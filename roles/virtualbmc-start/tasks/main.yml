---
- name: Checking if VirtualBMC Server is Running
  command:
    cmd: pgrep -f ./venv/bin/vbmcd
  register: _pgrep
  changed_when: false
  failed_when: false
- name: Starting VirtualBMC Server
  command:
    cmd: ./venv/bin/vbmcd
    creates: ./vbmc/vbmc.pid
  become: true
  environment:
    VIRTUALBMC_CONFIG: ./vbmc/vbmc.conf
  when: _pgrep.rc != 0
- name: Checking if Address is Added
  command:
    cmd: ip addr
  register: _ip
  changed_when: false
- name: Adding Address
  command:
    cmd: ip addr add {{ item.value }}/{{ '%s/%s' | format(ansible_facts.default_ipv4.network, ansible_facts.default_ipv4.netmask) | ipaddr('prefix') }} dev {{ ansible_facts.default_ipv4.interface }}
  become: true
  when: _ip.stdout is not search(item.value)
  loop: "{{ ipmi_addresses | dict2items }}"
- name: Gathering Virtual Machine Information
  shell:
    cmd: /mnt/c/Program\ Files/Oracle/VirtualBox/VBoxManage.exe showvminfo $(cat ./.vagrant/machines/{{ item.key }}/virtualbox/id) --machinereadable | grep -E ^name= | cut -d \" -f 2
  loop: "{{ ipmi_addresses | dict2items }}"
  register: _vboxmanage
  changed_when: false
- name: Checking if VirtualBMC is Running
  command:
    cmd: ./venv/bin/vbmc list -f value
  register: _vbmc
  changed_when: false
- name: Adding VirtualBMC
  command:
    cmd: ./venv/bin/vbmc add --username={{ ipmi_user }} --password={{ ipmi_password }} --address={{ item.item.value }} {{ item.stdout }}
  become: true
  when: _vbmc.stdout is not search(item.stdout)
  loop: "{{ _vboxmanage.results }}"
- name: Starting VirtualBMC
  command:
    cmd: ./venv/bin/vbmc start {{ item.stdout }}
  become: true
  when: _vbmc.stdout is not search(item.stdout + ' running')
  loop: "{{ _vboxmanage.results }}"
